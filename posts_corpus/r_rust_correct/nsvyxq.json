{
    "id": "nsvyxq",
    "title": "What are the most \"professional\" crates?",
    "selftext": "By this I mean the crates that are most likely to be used by professional Rust users (i.e. using it in their job) and least likely to be used by hobbyists.\n\nI figured a good way to measure this was to look at crates.io downloads across weeks - if most downloads of a crate happens during workdays and not a lot of downloads during weekends, then intuitively that crate is used in a professional setting rather than by hobbyists.\n\nAs an example, check out the [download graph of bevy](https://crates.io/crates/bevy) versus the [download graph of dockerfile](https://crates.io/crates/dockerfile). For bevy, the downloads are spread pretty much evenly. Meanwhile, dockerfile gets practically no downloads during weekends but a lot of downloads on workdays.\n\nI considered two metrics:\n\n- Proportion of workday downloads as part of total downloads (i.e. a crate that is downloaded exclusively on workdays has a score of 1, and one that is downloaded exclusively on weekends has a score of 0).\n\n- Pearson correlation of a dataset `(x_1, y_1), ..., (x_n, y_n)` where y_i = number of downloads on a certain day and x_i = 0 if that day is a weekend or 1 if it is a workday. In this way, the correlation is close to 1 if there are more downloads on workdays than weekends.\n\nI don't really know if these are a proper way of measuring, but I took these two metrics (for any crate with more than 100,000 total downloads) and multiplied them together. This gives the following list of the top 20 most \"professional\" crates  (with their \"professionality\" scores):\n\n    checked_int_cast               0.818\n    match_cfg                      0.779\n    graphql-introspection-query    0.765\n    cached_proc_macro_types        0.764\n    atomic-shim                    0.757\n    log-mdc                        0.755\n    tinyvec_macros                 0.753\n    pdqselect                      0.733\n    treeline                       0.719\n    base58                         0.707\n    haversine                      0.687\n    asynchronous-codec             0.683\n    parity-util-mem-derive         0.681\n    dyn-clonable                   0.675\n    dyn-clonable-impl              0.675\n    strip-ansi-escapes             0.667\n    parity-send-wrapper            0.666\n    mio-more                       0.665\n    tokio-named-pipes              0.664\n    console-web                    0.661\n\nIndeed, if you check `checked_int_cast` it appears to be downloaded primarily on workdays.\n\nHere's the top 20 for just the first metrics (proportion of workday downloads)\n\n    haversine                      0.989\n    flatdata                       0.989\n    quest                          0.982\n    dockerfile                     0.979\n    broadcast                      0.977\n    env                            0.976\n    sentry-failure                 0.976\n    duct_sh                        0.974\n    console-web                    0.973\n    sentry-log                     0.973\n    libtest-mimic                  0.973\n    port_scanner                   0.973\n    serde_millis                   0.972\n    zbus_polkit                    0.971\n    indent_write                   0.970\n    nom-supreme                    0.969\n    lazy_format                    0.969\n    priority-queue                 0.969\n    mobc                           0.969\n    function_name                  0.968\n\nAnd just the second metric (pearson correlation):\n\n    match_cfg                      0.890\n    tinyvec_macros                 0.888\n    checked_int_cast               0.876\n    log-mdc                        0.862\n    graphql-introspection-query    0.848\n    atomic-shim                    0.848\n    pdqselect                      0.847\n    treeline                       0.843\n    cached_proc_macro_types        0.825\n    base58                         0.819\n    parity-util-mem-derive         0.791\n    dyn-clonable                   0.789\n    dyn-clonable-impl              0.788\n    strip-ansi-escapes             0.779\n    tokio-named-pipes              0.779\n    parity-send-wrapper            0.773\n    asynchronous-codec             0.770\n    tokio-service                  0.768\n    hyper-old-types                0.708\n    supercow                       0.699\n\nNot really sure which metric is best of those 3 above, but hopefully this paints a somewhat complete picture.\n\nNow, it shouldn't be surprising that a lot of these crates are... \"boring\". Unlike hobbyist crates like bevy, they're not used because people find them fun or exciting. These crates are used for a specific purpose to solve problems in a professional environment - but that is also something that makes these crates interesting in a way.\n\nAnyways, hope you found this interesting too :)"
}