{
    "id": "ns1zu3",
    "title": "init-array: A crate to initialize arrays itemwise",
    "selftext": "It's always bugged me, that in Rust, you can only initialize fixed-size arrays with a const (or `Copy`) value, not with values computed at runtime which do not implement `Copy`. So naturally, I made a small [crate](https://crates.io/crates/init_array) which allows you to initialize arrays itemwise, such that a function is called for every item to compute its value based on its index. Its API looks like this:\n\n    fn init_array<T, F, const N: usize>(f: F) -> [T; N]\n    where\n        F: FnMut(usize) -> T\n\nThe given function initializes each item based on its index. Example:\n\n    assert_eq!(init_array(|i| i + 1), [1, 2, 3, 4, 5]);\n    assert_eq!(init_array(|i| i * i), [0, 1, 4, 9, 16, 25]);\n\nThanks to const generics, it's possible to use this crate to initialize arrays of any length. There are also functions provided to initialize a boxed fixed-sized array or a boxed dynamically-sized slice.\n\nIf you disable the `alloc` feature, which is enabled by default, it's also possible to use this crate in a `#[no_std]` context without an allocator. The crate itself is entirely `#[no_std]` compatible."
}