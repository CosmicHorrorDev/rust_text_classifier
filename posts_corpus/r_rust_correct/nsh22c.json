{
    "id": "nsh22c",
    "title": "[Problem] Adding rust in a CMake/Cpp project using Cxx and Corrosion linker iterator debug level issue",
    "selftext": "Im working on adding an easy way to use Rust code at my company  in an existing Cmake + Cpp project.\n\nTools that seems reasonable to help this integration is [Corrosion](https://github.com/AndrewGaspar/corrosion) and [Cxx](https://github.com/dtolnay/cxx).  \n\nTo make it as easy as possible for others to use and interface, I thought about making a CMake wrapper that automatically compiles and links the cxxbridge files so that everything works together and all Cpp developers only see it as a normal Cpp project and header.  \n\nHere is the [template project](https://github.com/trondhe/rusty_cmake) for testing that it works. All code shown below exists in this template project for reference\n\nHowever I have some problems when it comes to the linker stage.  \n\nFor a basic\n\n    #[no_mangle]\n    pub extern \"C\" fn rusty_c_integer() -> i32\nit works no problems. I can just declare that such a function exist in my main (without using cbindgen) and call it, links, runs and prints fine.  \n\nI have also declared the cxxbridge generated function\n\n    extern ::std::int32_t rusty_integer() noexcept;\n\n\nat the top. Uncommenting the line that invokes this function makes the linker generate an error  \n\n    [3/3] Linking CXX executable src\\rusty_cmake.exe\n    FAILED: src/rusty_cmake.exe \n    cmd.exe /C \"cd . && C:\\Programs\\LLVM\\bin\\clang++.exe -fuse-ld=lld-link -nostartfiles -nostdlib -g -Xclang -gcodeview -O0 -D_DEBUG -D_DLL -D_MT -Xclang --dependent-lib=msvcrtd -Xlinker /subsystem:console src/CMakeFiles/rusty_cmake.dir/main.cpp.obj -o src\\rusty_cmake.exe -Xlinker /implib:src\\rusty_cmake.lib -Xlinker /pdb:src\\rusty_cmake.pdb -Xlinker /version:0.0   src/cxxbridgecopy/mycxxbridge.lib  src/rusty_code.lib  -ladvapi32.lib  -luserenv.lib  -lws2_32.lib  -lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32 -loldnames && cd .\"\n    lld-link: error: /failifmismatch: mismatch detected for '_ITERATOR_DEBUG_LEVEL':\n    >>> src/CMakeFiles/rusty_cmake.dir/main.cpp.obj has value 2\n    >>> rusty_code.lib(cxx.o) has value 0\nUsing Clang 12 with GCC like cli on Windows. Testing the exact same code in wsl ubuntu 20.04, it works fine.  \n\n\nAny idea how to fix this issue? I.e maybe bump the iterator debug level in the rust lib to 2?  \n\n\nI'm guessing that it is as often a small dumb error that is quick to fix, but I am lost."
}