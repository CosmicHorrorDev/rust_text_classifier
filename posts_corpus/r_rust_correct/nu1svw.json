{
    "id": "nu1svw",
    "title": "how to share a TcpStream on every call (warp HTTP)",
    "selftext": "I have a TlsStream  `stream: tokio_native_tls::TlsStream<tokio::net::TcpStream>`\n\n I would like to use that connection on every call from a web service, for this, I am using warp, but the problem I have is that I can't clone the TcpStream, I am trying something like this;\n\n    \n    let arg = warp::any().map(move || stream.clone()); <---- \n    \n    let my_route = warp::any().and(arg.clone()).and_then(my_handler);\n    warp::serve(my_route).run((addr, port)).await\n    \n    async fn state_handler(\n        stream: tokio_native_tls::TlsStream<tokio::net::TcpStream>,\n    ) -> Result<impl warp::Reply, warp::Rejection> {\n        Ok(StatusCode::OK)\n    }\n\nWhen using clone I get:\n\n    no method named `clone` found for struct `tokio_native_tls::TlsStream<tokio::net::TcpStream>` in the current scope\n    \n\nThe code for obtaining the stream:\n\n&#x200B;\n\n    let stream = match timeout(Duration::from_secs(3),TcpStream::connect(\"192.168.1.11:3456\")).await {\n            Ok(conn) => match conn {\n                Ok(conn) => match TlsConnector::from(redis.tls)\n                    .connect(\"192.168.1.11:3456\", conn)\n                    .await\n                {\n                    Ok(s) => s,\n                    Err(e) => {\n                        eprintln!(\"{}\", e);\n                        process::exit(1);\n                    }\n                },\n                Err(e) => {\n                    eprintln!(\"{}\", e);\n                    process::exit(1);\n                }\n            },\n            Err(e) => {\n                eprintln!(\"Timeout :{}\", e);\n                process::exit(1);\n            }\n        };\n    \n\nAny ideas about how could I pass the stream to the handler?\n\nI would like to prevent doing a connection on every call and instead use the existing connection."
}