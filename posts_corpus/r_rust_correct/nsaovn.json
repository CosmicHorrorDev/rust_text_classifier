{
    "id": "nsaovn",
    "title": "generators/yield",
    "selftext": "just tinkered with these a bit in nightly in the playground.. they look rather tempting, but switching to the nightly build carries risks. My previous rust-winter was lengthened >1year by some bitrotted nightly use that was offputting for me to clean up. I'm wondering if this is worth it..\n\nThey do look really useful for streamlining writing iterators and some concurrent usecases. New programming language \"toys\" ( in the low-level GCless world) keep the programming experience fresh after 30+ years, so they're a big draw.\n\n&#x200B;\n\n* how far off stability are they (ballpark -months/years/decade)?\n* whats the risk of compiler bugs?\n* whats the chance of changes in the APIs around them?\n* is it even 100% certain that this code will stabilise?\n* are there any gotchas that might prevent some of the use cases I have in mind?\n* how does their functionality and release schedule compare with the corresponding C++20 features?\n* are there any gotchas in the pin/unpin behaviour? i still haven't 100% internalised the details of  situation where thats needed. I seemed to be able to write a wrapper that did the 'pin' for a resume call.. is there scope for subtle bugs not yet visible that will complicate use cases when they're fixed?\n\n&#x200B;\n\nexample use cases:- **streamlining iterators** \\- I have some spatial datastructures with internal iterators for queries/traversals. I figure these could be done in a way that looks more like other rust iterator code (& more composably), but the burden of figuring out those statemachines manually had me just settling for internal iteration (\".foreach\\_overlapping(sphere,||..)\" instead (did what I needed quickly)\n\n&#x200B;\n\nTo be fair i'm writing a game engine for myself. This is pure NIH, even using anyone elses linear algebra types would destroy my own motivation, so although i'd like my code to be useable by others.. realistically anyone with this interest writes their own aswell.\n\nSo the real issue here is me keeping up to date with the ecosystem and motivated to keep using rust (I have a draw back to a superior-looking C++ sourcebase from last year that still makes better screenshots- i'm trying to stay motivated to close the gap) and there's the  small chance of producing bits here and there that might help someone else (like common fileformat loaders), or inspire others to actually try rust themselves (eg throwing screenshots out in forums helps, and I have real world ex-colleagues in the games industry I can try to convince to take it more seriously hah.).\n\nThe prospect of co-routines IS pretty tempting for some game programming use-cases.."
}