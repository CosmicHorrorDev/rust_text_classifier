{
    "id": "nt5hpp",
    "title": "Parsing nested structs with endianness using nom-derive",
    "selftext": "Hello guys,\n\nI'm using nom to parse a struct. All my data is little endian, so I added `LittleEndian` to the nom options. For a single struct this seems to work. However when I now start nesting the structs, I run into compile errors. The derive macro of the outer struct generates a method that tries to access `parse_le` for the inner struct but the derive macro for the inner struct only implemented a method `parse` which leads to the error message `function or associated item parse_le not found for this`.\n\n    use nom_derive::*;\n    \n    #[derive(Nom)]\n    #[nom(LittleEndian)]\n    pub struct Inner(u32);\n    \n    #[derive(Nom)]\n    #[nom(LittleEndian)]\n    pub struct Outer(Inner);\n\nI found that I can resolve the issue with the annotation `#[nom(Parse=\"Inner::parse\")]` but that seems tedious to do for all nested structs. What am I doing wrong? How should explicit endianness in nom-derive be used?"
}