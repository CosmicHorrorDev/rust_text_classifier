{
    "id": "num6mz",
    "title": "trying to understand async rust",
    "selftext": "hey all! rust newbie here!  I've just finished the rust book, and want to try to use the knowledge gained to learn a bit more about web development with rust.  my background is mostly in ruby, with some experience also in go.  Right now I'm getting a little stuck with spawning threads regularly in rust (which i understand are just OS threads) vs using async rust (primarily I'm looking into tokio at the moment).\n\nFrom what I understand, when you call an async function in rust, you have to use the .await method to actually \"load\" the function. This then tells the runtime (I guess this is a rust implemented scheduler essentially?) that when you call this function, you can go do something else and come back to it later.\n\nWith this in mind, I would think that if I have some async function:\n```\nasync fn sleep_and_print(s: &str, duration: Duration) {\n       sleep(duration).await;\n       println!(\"{}\", s);\n}\n```\n\nAnd then I was using it in a runtime like so:\n```\nuse tokio::time::{sleep, Duration};\n\nfn main() {\n    rt.block_on(async {\n        sleep_and_print(\"a\", Duration::from_secs(3)).await;\n        sleep_and_print(\"b\", Duration::from_secs(1)).await;\n        sleep_and_print(\"c\", Duration::from_secs(2)).await;\n    })\n}\n```\n\nI would expect output in order of \"b\", \"c\", \"a\", however I get \"a\", \"b\", \"c\".\n\nThis changes if I put everything into tokio threads:\n```\n    rt.block_on(async {\n        tokio::spawn(async {\n            sleep_and_print(\"a\", Duration::from_secs(3)).await;\n        });\n        tokio::spawn(async {\n            sleep_and_print(\"b\", Duration::from_secs(1)).await;\n        });\n        tokio::spawn(async {\n            sleep_and_print(\"c\", Duration::from_secs(2)).await;\n        });\n        sleep(Duration::from_secs(4)).await;\n    })\n```\noutput: \"b\", \"c\", \"a\"\n\nThis is also the same output if I use the std library's versions of what is provided by tokio\n\n```\nuse std::thread::sleep;\nuse std::time::Duration;\n```\n\nMaking this equivalent to spawning os threads.\n\nMy questions are:\n - without using tokio threads, what's the difference between using tokio and async functions vs just regular sync rust?  \n- And if there's no difference, why use any async functions outside of spawned tokio threads?\n- And since tokio threads seem to be working similar to regular os threads, what's the point in using tokio threads at all actually?"
}