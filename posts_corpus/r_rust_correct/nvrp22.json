{
    "id": "nvrp22",
    "title": "macro_rules! and DSL -> Why does my \"token\" need brackets ()?",
    "selftext": "`#![allow(unused_must_use)]`  \n`macro_rules! write_html {`  \n  `($w:expr, ) => (write!($w, \"(0)\"));`  \n  `($w:expr, $e:tt) => (write!($w, \"(1) {}\", $e));`\n\n  \n  `($w:expr, input ( $mark:tt ) $($rest:tt)* ) => {{`  \n`write!($w, \"(4)data: {}\", stringify!($mark));`  \n`write_html!($w, $($rest)*);`  \n  `}};`  \n`//working with nl()`  \n`($w:expr,nl() $($rest:tt)* ) => {{`  \n`write!($w, \"(5)\\n\");`  \n`write_html!($w, $($rest)*);`  \n`}};`  \n`//same but without () its only working at beginning and in middle`  \n   `($w:expr,nl $($rest:tt)* ) => {{`  \n`write!($w, \"(5)\\n\");`  \n`write_html!($w, $($rest)*);`  \n `}};`  \n`}`  \n`fn main() {`  \n`use std::fmt::Write;`  \n`let mut out = String::new();`  \n`write_html!(&mut out,`  \n`nl     //<- OK`  \n`input (1u32)`  \n`nl   //<- Error but: nl() <-works ....`  \n`);`  \n`}`  \n\n\nI'm starting to dabble in macros. I'm probably too stupid to grasp the complexity, but I wanted to have a try at DSL with macros. Took the existing example on the rust example site and modified it a bit. In doing so, I run into an error that I can't quite explain.\n\nThe idea is to define a command (\"nl\") that writes new-line to the stream. For my \"definition\" this command does not need any further tokens. Also no brackets \"()\", like `($w:expr,nl $($rest:tt)* )`\n\nInterestingly, my newly created nl-token works at the beginning and in the middle, but if I put this nl-token at the end of my DSL-language-script, then I'm getting an error. \n\nHowever, if I pack brackets \"()\" into the pattern `($w:expr,nl() $($rest:tt)* )`, then the nl()-command works everywhere.\n\nWhere is my thinking mistake?"
}