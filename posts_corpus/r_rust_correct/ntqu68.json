{
    "id": "ntqu68",
    "title": "Implementation of `FnOnce` is not general enough.",
    "selftext": "What does the compiler want to tell me with this error message? [Rust Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=bb758f91129318267b26da43ce138a56)\n\n    fn foo(f: impl FnOnce(&mut i32)) {\n        let g = |x| {\n            println!(\"Hello\");\n            f(x);\n        };\n    \n        bar(g);\n    }\n    \n    fn bar(f: impl FnOnce(&mut i32)) {}\n\nResult\n\n    error: implementation of `FnOnce` is not general enough\n    --> src/lib.rs:7:5\n      |\n    7 |     bar(g);\n      |     ^^^ implementation of `FnOnce` is not general enough\n      |\n      = note: closure with signature `fn(&'2 mut i32)` must implement `FnOnce<(&'1 mut i32,)>`, for any lifetime `'1`...\n      = note: ...but it actually implements `FnOnce<(&'2 mut i32,)>`, for some specific lifetime `'2`\n\nAnd why does the error go away when I inline the variable? [Rust Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d73ee447b3e85997edb30a44d545ff52)\n\n    fn foo(f: impl FnOnce(&mut i32)) {\n        bar(|x| {\n            println!(\"Hello\");\n            f(x);\n        });\n    }\n    \n    fn bar(a: impl FnOnce(&mut i32)) {}"
}