{
    "id": "nvb62a",
    "title": "Shellfish - A way to make interactive shells in a rust program",
    "selftext": "[Gitlab link](https://gitlab.com/john_t/shellfish)\n\nRecently, as a mini-project I created shellfish, to allow you to embed an interactive shell in a rust program. This was for projects where a full TUI is too much but command line parsing is inadequate because you need a saved state. Shellfish lets you create such a shell within a program, where any struct can be used to save state.\n\n[![asciicast](https://asciinema.org/a/GDLM0t9877OIirgoA6eX68bYA.svg)](https://asciinema.org/a/GDLM0t9877OIirgoA6eX68bYA)\n\nHere is some example code, showing how to use a shared state:\n\n```rust\nuse shellfish::Command;\nuse shellfish::Shell;\nuse std::error::Error;\nuse std::fmt;\nuse std::ops::AddAssign;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Define a shell\n    let mut shell = Shell::new(0_u64, \"<[Shellfish Example]>-$ \");\n\n    // Add some command\n    shell.commands.insert(\n        \"count\".to_string(),\n        Command::new(\"increments a counter.\".to_string(), count),\n    );\n\n    // Run the shell\n    shell.run()?;\n\n    Ok(())\n}\n\n/// Acts as a counter\nfn count(state: &mut u64, _args: Vec<String>) -> Result<(), Box<dyn Error>> {\n    state.add_assign(1);\n    println!(\"You have used this counter {} times\", state);\n    Ok(())\n}\n```"
}