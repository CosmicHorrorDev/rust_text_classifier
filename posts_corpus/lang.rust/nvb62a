Shellfish - A way to make interactive shells in a rust program
[Gitlab link](https://gitlab.com/john_t/shellfish)

Recently, as a mini-project I created shellfish, to allow you to embed an interactive shell in a rust program. This was for projects where a full TUI is too much but command line parsing is inadequate because you need a saved state. Shellfish lets you create such a shell within a program, where any struct can be used to save state.

[![asciicast](https://asciinema.org/a/GDLM0t9877OIirgoA6eX68bYA.svg)](https://asciinema.org/a/GDLM0t9877OIirgoA6eX68bYA)

Here is some example code, showing how to use a shared state:

```rust
use shellfish::Command;
use shellfish::Shell;
use std::error::Error;
use std::fmt;
use std::ops::AddAssign;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Define a shell
    let mut shell = Shell::new(0_u64, "<[Shellfish Example]>-$ ");

    // Add some command
    shell.commands.insert(
        "count".to_string(),
        Command::new("increments a counter.".to_string(), count),
    );

    // Run the shell
    shell.run()?;

    Ok(())
}

/// Acts as a counter
fn count(state: &mut u64, _args: Vec<String>) -> Result<(), Box<dyn Error>> {
    state.add_assign(1);
    println!("You have used this counter {} times", state);
    Ok(())
}
```