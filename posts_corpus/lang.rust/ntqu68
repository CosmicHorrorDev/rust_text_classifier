Implementation of `FnOnce` is not general enough.
What does the compiler want to tell me with this error message? [Rust Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=bb758f91129318267b26da43ce138a56)

    fn foo(f: impl FnOnce(&mut i32)) {
        let g = |x| {
            println!("Hello");
            f(x);
        };
    
        bar(g);
    }
    
    fn bar(f: impl FnOnce(&mut i32)) {}

Result

    error: implementation of `FnOnce` is not general enough
    --> src/lib.rs:7:5
      |
    7 |     bar(g);
      |     ^^^ implementation of `FnOnce` is not general enough
      |
      = note: closure with signature `fn(&'2 mut i32)` must implement `FnOnce<(&'1 mut i32,)>`, for any lifetime `'1`...
      = note: ...but it actually implements `FnOnce<(&'2 mut i32,)>`, for some specific lifetime `'2`

And why does the error go away when I inline the variable? [Rust Playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d73ee447b3e85997edb30a44d545ff52)

    fn foo(f: impl FnOnce(&mut i32)) {
        bar(|x| {
            println!("Hello");
            f(x);
        });
    }
    
    fn bar(a: impl FnOnce(&mut i32)) {}