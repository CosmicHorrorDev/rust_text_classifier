I'm trying to understand the definition of Iterator and IntoIterator
I'm trying to really understand Rust syntax and I've been following [Programming Rust](https://www.oreilly.com/library/view/programming-rust/9781491927274/) carefully. The book has been fantastic so far, but in Chapter 15 (Iterators), they appear to have dropped in some syntax they didn't previously introduce and just left it unexplained. First they introduce the definition of the `Iterator` trait:

    trait Iterator {
        type Item;
        fn next(&mut self) -> Option<Self::Item>;
        .. // many default methods
    }

Then they introduce the definition of the `IntoIterator` trait:

    trait IntoIterator where Self::IntoIter::Item == Self::Item {
        type Item;
        type IntoIter: Iterator;
        fn into_iter(self) -> Self::IntoIter;
    }

I've never seen this kind of syntax for trait bound after the `where` keyword. The `==` syntax stands out. Is there a name for this? After typing this up carefully, I realized that the where clause says `Self::IntoIter::Item` and not `Self::IntoIterator::Item` which makes way more sense.  I'm assuming this syntax simply says that the types `IntoIter::Item` and `Iterator::Item` are equivalent?